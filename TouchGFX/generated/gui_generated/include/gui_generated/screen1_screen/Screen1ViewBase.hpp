/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ButtonDownClicked()
    {
        // Override and implement this function in Screen1
    }

    virtual void ButtonUpClicked()
    {
        // Override and implement this function in Screen1
    }

    virtual void ButtonStartClicked()
    {
        // Override and implement this function in Screen1
    }

    virtual void ButtonUpTimeClicked()
    {
        // Override and implement this function in Screen1
    }

    virtual void ButtonDownTimeClicked()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image2;
    touchgfx::Image image3;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  ButtonDown;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  ButtonUp;
    touchgfx::TextArea LabelPradLadowania;
    touchgfx::TextAreaWithOneWildcard txtPradLadowania;
    touchgfx::ButtonWithLabel buttonStart;
    touchgfx::Image image3_1;
    touchgfx::TextArea LabelNapiecieBaterii;
    touchgfx::TextAreaWithOneWildcard txtNapiecieBaterii;
    touchgfx::TextArea LabelChargingTime;
    touchgfx::Image image3_2;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  ButtonDownTime;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  ButtonUpTime;
    touchgfx::TextAreaWithOneWildcard txtChargingTime;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TXTPRADLADOWANIA_SIZE = 10;
    touchgfx::Unicode::UnicodeChar txtPradLadowaniaBuffer[TXTPRADLADOWANIA_SIZE];
    static const uint16_t TXTNAPIECIEBATERII_SIZE = 10;
    touchgfx::Unicode::UnicodeChar txtNapiecieBateriiBuffer[TXTNAPIECIEBATERII_SIZE];
    static const uint16_t TXTCHARGINGTIME_SIZE = 3;
    touchgfx::Unicode::UnicodeChar txtChargingTimeBuffer[TXTCHARGINGTIME_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SCREEN1VIEWBASE_HPP
